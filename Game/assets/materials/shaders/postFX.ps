//this var comes from the vertex shader
varying vec3 v_position;
varying vec3 v_world_position;
varying vec2 v_uv;
varying vec4 v_color;
varying vec3 v_normal;

//Texturas
uniform sampler2D color_texture;
uniform vec3 text_color;
uniform float alpha;

#define KERNEL_SIZE 9

const float kernel[KERNEL_SIZE] = { 
	1.0/16.0, 2.0/16.0, 1.0/16.0,
	2.0/16.0, 4.0/16.0, 2.0/16.0,
	1.0/16.0, 2.0/16.0, 1.0/16.0 };

const float step_w = 1.0/1560;
const float step_h = 1.0/1560;

const vec2 offset[KERNEL_SIZE] = { vec2(-step_w, -step_h), vec2(0.0, -step_h), vec2(step_w, -step_h), 
				vec2(-step_w, 0.0), vec2(0.0, 0.0), vec2(step_w, 0.0), 
				vec2(-step_w, step_h), vec2(0.0, step_h), vec2(step_w, step_h) };

float A = 0.15;
float B = 0.50;
float C = 0.10;
float D = 0.20;
float E = 0.02;
float F = 0.30;
float W = 11.2;

vec4 applyBlur(vec4 texColor){

	int i = 0;
	for( i=0; i<KERNEL_SIZE; i++ ){
		vec4 tmp = texture2D(color_texture, v_uv.st + offset[i]);
		texColor += tmp * kernel[i];
	}

	return texColor;
}

vec3 optimeFilmic(vec4 texColor){
	
	texColor *= 1.5; 
	vec3 x = max(0,texColor.rgb-0.004);
	vec3 retColor = (x*(6.2*x+.5))/(x*(6.2*x+1.7)+0.06);

	return retColor;
}

vec3 Uncharted2Tonemap(vec3 x){

	return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

vec3 unchartedFilmic(vec4 texColor){

	texColor *= 4;  
	 
	float ExposureBias = 2.0f;
	vec3 curr = Uncharted2Tonemap(ExposureBias*texColor.rgb);
	 
	vec3 whiteScale = 1.0f/Uncharted2Tonemap(W);
	vec3 color = curr*whiteScale;
	 
	vec3 retColor = pow(color,1/2.2);

	return retColor;
}

vec3 applyVignette(vec3 finalColor){
	
	vec2 resolution = vec2(0.45,0.38);
	vec2 pixPos = v_uv.xy / resolution - 0.5;
	//float len = length(pixPos);
	float dist = distance(v_uv.xy, vec2(0.5,0.5));
	float vignette = smoothstep(0.65, 0.38, dist);
	finalColor = mix(finalColor.rgb, finalColor.rgb * vignette, 0.6);

	return finalColor;
}

void main()
{

	vec4 texColor = vec4(0.0);
	texColor = texture2D(color_texture, v_uv.st);
	//texColor = applyBlur(texColor);
	vec3 finalColor = optimeFilmic(texColor);
	//vec3 finalColor = unchartedFilmic(texColor);

	finalColor = applyVignette(finalColor);
	gl_FragColor = vec4(finalColor,1);

}
