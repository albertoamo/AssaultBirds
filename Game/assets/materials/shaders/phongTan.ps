//Constant variables
const float LOG2 = 1.442695;

//this var comes from the vertex shader
varying vec3 v_position;
varying vec3 v_world_position;
varying vec2 v_uv;
varying vec4 v_color;
varying vec3 v_tangent;
varying vec3 v_normal;

//Atributos Camara y luz
uniform vec3 eye_pos;
uniform vec3 light_pos;

//Light attributes
uniform vec3 light_color;
uniform float id;
uniform float is;

//Material textures & attributes
uniform sampler2D color_texture;
uniform sampler2D color_textureN;
uniform float alpha;
uniform float time;

//World attributes
//uniform vec3 ambColor;
//uniform float ambCons;
//uniform vec3 fogColor;
//unfiorm float fogDen;
vec3 ambColor = vec3(0.9,0.9,0.9);
float ambK = 0.4;


varying vec4 projCoords;
uniform sampler2D color_reflection;
float gamma = 1.8;

uniform sampler2D shadow_map;
varying vec4 shadowCoords;
uniform mat4 shadowMat;

//CONTENT WARNING
//This shader is a fucking mess, brace yourselves before watching this pile of shit.

//////////////////////////////////////////////////////////////////
vec2 displaceMap(vec2 uvMap, sampler2D dispMap, float power){

	vec3 noiseVec;
	vec2 displacement;

	displacement = uvMap.xy;
	float scaledTimer = time/100000 * power;

	displacement.x += scaledTimer;
	displacement.y -= scaledTimer;

	noiseVec = normalize(texture2D(color_textureN, displacement.xy).xyz);
	noiseVec = (noiseVec * 2.0 - 1.0) * 0.035;

	return noiseVec.xy;
	//return vec2(1.0,1.0);
}
//////////////////////////////////////////////////////////////////

float diffuse_reflection(vec3 L, vec3 N)
{
	float LdotN = max(0,dot(L, N));
	return id*LdotN*0.6;
}

float specular_reflection(vec3 R, vec3 V)
{
	float RdotV = max(0,dot(R,V));
	return texture2D( color_texture, v_uv ).w * pow(RdotV, alpha) * is * 1.5;
}

float specular_blinn(vec3 L, vec3 V, vec3 N)
{
	vec3 halfwayDir = normalize(L + V);  
    float spec = pow(max(dot(N, halfwayDir), 0.0), 32.0);
	return texture2D( color_texture, v_uv ).w * spec * is;
}

//Tangent space operations, not coded by us.
///////////////////////////////////////////////
mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( p );
    vec3 dp2 = dFdy( p );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );
 
    // solve the linear system
    vec3 dp2perp = cross( dp2, N );
    vec3 dp1perp = cross( N, dp1 );
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
    // construct a scale-invariant frame 
    float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
    return mat3( T * invmax, B * invmax, N );
}

vec3 perturb_normal( vec3 N, vec3 V, vec2 texcoord )
{
    // assume N, the interpolated vertex normal and 
    // V, the view vector (vertex to eye)

    #ifdef REFLECTION
    	vec2 noised = displaceMap(v_uv, color_textureN, 0.3);
		vec3 map = texture(color_textureN, texcoord +noised).xyz;
	#else
		vec3 map = texture(color_textureN, texcoord ).xyz;
	#endif

	map = map * 255./127. - 128./127.;
    mat3 TBN = cotangent_frame(N, -V, texcoord);
    return normalize(TBN * map);
}
///////////////////////////////////////////



//Light constants from diffuse and specular components
float light_constant()
{
	vec3 normal = normalize(v_normal);

	vec3 light = normalize(light_pos - vec3(0,0,0));//normalize(light_pos - v_world_position); LUZ DIRECCIONAL
	vec3 vista = normalize(eye_pos - v_world_position);

	vec3 N = perturb_normal(normal, vista, v_uv);

	vec3 reflection = normalize( reflect(-light, N) );

	float dif = diffuse_reflection(light, N);
	float spec = specular_reflection(light, N);

	#ifdef SPECULAR
		return dif + spec;
	#else
		return dif;
	#endif

}

float random(in vec3 seed, in float freq)
{
   float dt = dot(floor(seed * freq), vec3(53.1215, 21.1352, 9.1322));
   return fract(sin(dt) * 2105.2354);
} 

int randomInt(in vec3 seed, in float freq, in int maxInt)
{
   return int(float(maxInt) * random(seed, freq)) % maxInt;
}

vec2 poissonDisk[13] = vec2[]
(
   vec2(-0.9328896, -0.03145855), // left check offset
   vec2(0.8162807, -0.05964844), // right check offset
   vec2(-0.184551, 0.9722522), // top check offset
   vec2(0.04031969, -0.8589798), // bottom check offset
   vec2(-0.54316, 0.21186), vec2(-0.039245, -0.34345), vec2(0.076953, 0.40667),
   vec2(-0.66378, -0.54068), vec2(-0.54130, 0.66730), vec2(0.69301, 0.46990),
   vec2(0.37228, 0.038106), vec2(0.28597, 0.80228), vec2(0.44801, -0.43844)
);

float randomAngle(in vec3 seed, in float freq)
{
   return random(seed, freq) * 6.283285;
}

#define EPSILON 0.00001

float makeShadows(vec4 projCoords)
{
    vec3 finalCoords = projCoords.xyz / projCoords.w;
    finalCoords = finalCoords * 0.5 + 0.5;
    float shadow = 0.0;

    if(finalCoords.z  > 1.0)
        return shadow;

    float currentDepth = finalCoords.z;
    vec3 light = normalize(light_pos - vec3(0,0,0));
    vec3 normal = normalize(v_normal);
    float bias = max(0.00005 * (1.0 - dot(normal, light)), 0.00005); 
    
    float numSamplesUsed = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadow_map, 0);
    float angle = randomAngle(v_world_position, 15);
    float s = sin(angle);
    float c = cos(angle);
    float PCFRadius = 5;

    for(int i=0; i<13; i++){
        int randomIndex = randomInt(v_world_position * i, 100, 13);
        float pcfDepth = texture(shadow_map, finalCoords.xy + PCFRadius * texelSize * poissonDisk[randomIndex]).r; 
        shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;      
    }

   shadow = shadow/12.0;

   return shadow;

}


//Here we mix up everything with the phong equation
vec3 phong_ecuation()
{

	//Phong equation
	vec3 ambient = ambColor * ambK;
	vec3 colour = light_constant() * light_color;

	#ifdef SHADOWS
		float shadow = makeShadows(shadowCoords);
		colour = (1-shadow) * colour;
	#endif

	vec3 v_color = ambient + colour;

	#ifdef MAPMOVE
		v_uv = vec2(v_uv.x + time/1000000, v_uv.y);
	#endif

	//Adding the ambient component to the equation
	#ifdef REFLECTION
		vec2 noised = displaceMap(v_uv, color_textureN, 0.3);
		v_color = texture2D( color_texture, v_uv + noised.xy).xyz * v_color;
	#else
		v_color = texture2D( color_texture, v_uv ).xyz * v_color;
	#endif

	return v_color;
	
}

//Fog squared exponential function, uses log^2
vec3 makeFog(vec3 org_color)
{

	float zet = length(eye_pos - v_world_position);
	float fogFactor = exp2( -0.0001 * 0.0001 * zet * zet * LOG2 * 0.3);
	fogFactor = clamp(fogFactor, 0.0, 1.0);
	return mix(vec3(0.18,0.24,0.31), org_color, fogFactor);
}

vec4 makeReflection(vec4 v_color){
	
	vec3 finalCoords = projCoords.xyz / projCoords.w;
	finalCoords = finalCoords * 0.5 + 0.5;
	vec2 noised = displaceMap(finalCoords, color_textureN, 0.03);
	vec2 finCord = vec2(finalCoords.x + noised.x, finalCoords.y);
	vec4 ProjMapColor = texture(color_reflection, finCord);
	return ProjMapColor*v_color;

}

void main()
{

	vec3 final_color = v_color * phong_ecuation();

	#ifdef FOG
		final_color = makeFog(final_color);
	#endif
		final_color = final_color;
	#ifdef REFLECTION
		final_color = makeReflection(vec4(final_color,1.0));
		final_color.xyz = pow( final_color.xyz, vec3(1.0/gamma));
		gl_FragColor = vec4(final_color, 0.5);
	#else
		gl_FragColor = vec4(final_color, texture2D( color_texture, v_uv ).w);
	#endif
	
}
